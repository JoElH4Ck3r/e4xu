/**
 *  Generated by mxmlc 4.0
 *  qwe
 *  Package:    com.aditall.core
 *  Class:      Mixer
 *  Source:     C:\Develop\ADITALL\MIXER\playerAS3\tag0\com\aditall\core\Mixer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2009.11.19 19:17:45 IST
 */
package com.aditall.core
{
import com.aditall.components.TimelineChrome;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;
import mx.utils.XMLUtil;
import org.wvxvws.base.FrameTwo;
import org.wvxvws.gui.DIV;
import org.wvxvws.gui.GUIEvent;
import org.wvxvws.gui.SPAN;
import org.wvxvws.gui.skins.LabelProducer;
import org.wvxvws.gui.skins.SkinProducer;
import org.wvxvws.gui.skins.TextFormatMXML;
import org.wvxvws.gui.windows.ChromeBar;
import org.wvxvws.gui.windows.ChromeToolStrip;


  
	[Frame(factoryClass="com.aditall.core.Start")]
	[Frame(extraFrame="com.aditall.core.Start")]
	
  [Frame(extraClass="FlexInit")]


public class Mixer
    extends org.wvxvws.base.FrameTwo
        implements mx.binding.IBindingClient
    {
              public var _Mixer_ChromeBar1 : org.wvxvws.gui.windows.ChromeBar;  
              public var _Mixer_SPAN1 : org.wvxvws.gui.SPAN;  
              [Bindable]
        public var tl : com.aditall.components.TimelineChrome;  
              [Bindable]
        public var toolStrip : org.wvxvws.gui.windows.ChromeToolStrip;  
    
    
      public function Mixer()
    {
        super();

                  

                  

                  

                  

                
        
		var bindings:Array = _Mixer_bindingsSetup();
		var watchers:Array = [];

		var target:Object = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_aditall_core_MixerWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					function(propertyName:String):* { return Mixer[propertyName]; },
					bindings,
					watchers);

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);

        

        // our style settings



        // layer initializers

       
        // properties
        this.width = 800;
        this.height = 600;
        _Mixer_ChromeBar1_i();
        _Mixer_SPAN1_i();
        _Mixer_TimelineChrome1_i();
        _Mixer_ChromeToolStrip1_i();


        // events
        this.addEventListener("initialized", ___Mixer_FrameTwo1_initialized8);

        
		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

        

    }
    
    
      
			import flash.display.StageQuality;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.Rectangle;
			import flash.net.FileFilter;
			import flash.net.FileReference;
			import flash.net.navigateToURL;
			import flash.net.URLRequest;
			import flash.text.TextFieldType;
			import flash.utils.ByteArray;
			import flash.utils.IDataInput;
			import nochump.util.zip.ZipEntry;
			import nochump.util.zip.ZipFile;
			import nochump.util.zip.ZipOutput;
			import org.wvxvws.cursor.Cursor;
			import org.wvxvws.gui.renderers.ILabel;
			import org.wvxvws.gui.windows.ChromeAlert;
			import org.wvxvws.gui.windows.ChromePropmpt;
			import org.wvxvws.gui.windows.ChromeSubmit;
			import org.wvxvws.jsutils.key.JSKeyHandler;
			import org.wvxvws.managers.WindowManager;
			import org.wvxvws.utils.KeyUtils;
			import com.aditall.forms.WelcomeForm;
			import com.aditall.panels.WorkspacePanel;
			import com.aditall.panels.ToolPanel;
			import com.aditall.panels.ColorPanel;
			import com.aditall.assets.img.WhitePage;
			
			private var _promptFields:Vector.<ILabel> = new <ILabel>[];
			private var _browseForFile:ChromeSubmit;
			private var _submit:ChromePropmpt;
			private var _alert:ChromeAlert;
			private var _fr:FileReference = new FileReference();
			private var _extensions:Array = 
				[new FileFilter("Adiall Project file", "*.axml"),
				new FileFilter("XML file", "*.xml")];
			private var _playerXML:XML;
			private var _frBusy:Boolean;
			private var _zipFile:ZipFile;
			private var _zipOutput:ZipOutput;
			private var _ws:WorkspacePanel;
			private var _tools:ToolPanel;
			private var _cp:ColorPanel;
			
			private function initializedHandler():void
			{
				WindowManager.init(super.stage);
				JSKeyHandler.init();
				Cursor.init(stage);
				super.stage.quality = StageQuality.HIGH;
				super.stage.addEventListener(
					Event.RESIZE, stage_resizeHandler, false, 0, true);
				_browseForFile = new ChromeSubmit(browseHandler);
				_browseForFile.height = 24;
				_browseForFile.submit.label = "Browse";
				_promptFields.push(_browseForFile);
				
				if (!_cp) 
					_cp = WindowManager.attach(ColorPanel, this, 
					new Rectangle(this.width - 275, 20, 270, 275)) as ColorPanel;
				if (!_tools) 
					_tools = WindowManager.attach(ToolPanel, this, 
						new Rectangle(10, 40, 30, 100)) as ToolPanel;
				if (!_submit) 
					_submit = ChromePropmpt.show(_promptFields, submitHandler, 
									null, new Rectangle(0, 0, 400, 200));
				if (!_ws) 
					_ws = WindowManager.attach(WorkspacePanel, this, 
							new Rectangle((super.width - 700) >> 1, 
							(super.height - 520) >> 1, 700, 520)) as WorkspacePanel;
				_browseForFile.field.type = TextFieldType.DYNAMIC;
				this.stage_resizeHandler(null);
				super.stage.addEventListener(
					Event.DEACTIVATE, stage_deactivateHandler);
			}
			
			protected function stage_deactivateHandler(event:Event):void 
			{
				KeyUtils.clear();
			}
			
			protected function submitHandler(fields:Vector.<String>):void
			{
				if (!fields[0].length)
				{
					_alert = ChromeAlert.show("Must select file!", alertHandler);
				}
				else  WindowManager.destroy(_submit);
			}
			
			protected function alertHandler(input:Boolean):void
			{
				WindowManager.destroy(_alert);
			}
			
			protected function fr_selectHandler(event:Event):void 
			{
				_fr.addEventListener(Event.COMPLETE, fr_completeHandler);
				_fr.load();
				_frBusy = false;
			}
			
			protected function fr_completeHandler(event:Event):void 
			{
				var ze:ZipEntry;
				var ba:ByteArray;
				try
				{
					if (/\.xml$/g.test(_fr.name))
					{
						_playerXML = XML(_fr.data);
					}
					else
					{
						_zipFile = new ZipFile(IDataInput(_fr.data));
						ze = _zipFile.getEntry("project.xml");
						ba = _zipFile.getInput(ze);
						_playerXML = XML(ba.readUTF());
					}
					_ws.dataProvider = _playerXML;
					tl.dataProvider = _playerXML;
					_browseForFile.field.text = _fr.name;
				}
				catch (error:Error)
				{
					_alert = ChromeAlert.show("Invalid project file\r" + 
											error.message, alertHandler);
				}
				_frBusy = false;
				KeyUtils.clear();
			}
			
			protected function browseHandler(value:String):void
			{
				_fr.addEventListener(Event.SELECT, fr_selectHandler);
				KeyUtils.clear();
				_fr.browse(_extensions);
			}
			
			private function menuClickHandler(node:XML):void
			{
				var label:String;
				if (node) label = node.@label;
				switch (label)
				{
					case "Save":
						if (!_frBusy)
						{
							_frBusy = true;
							_fr.cancel();
							_fr.removeEventListener(Event.SELECT, fr_selectHandler);
							_fr.removeEventListener(Event.COMPLETE, fr_completeHandler);
							_fr.addEventListener(Event.CANCEL, fr_cancelHandler);
							var ba:ByteArray = new ByteArray();
							ba.writeUTF(_playerXML.copy());
							ba.position = 0;
							_zipOutput = new ZipOutput();
							var ze:ZipEntry = new ZipEntry("project.xml");
							_zipOutput.putNextEntry(ze);
							_zipOutput.write(ba);
							_zipOutput.closeEntry();
							_zipOutput.finish();
							_fr.save(_zipOutput.byteArray, "Untitled.axml");
						}
						break;
					case "Open Project":
						if (!_frBusy)
						{
							_frBusy = true;
							_fr.cancel();
							_fr.addEventListener(Event.SELECT, fr_selectHandler);
							_fr.addEventListener(Event.CANCEL, fr_cancelHandler);
							_fr.browse(_extensions);
						}
						break;
					default:
						navigateToURL(new URLRequest(label));
						break;
				}
				KeyUtils.clear();
			}
			
			protected function fr_cancelHandler(event:Event):void 
			{
				_frBusy = false;
			}
			
			private function iconHandler(event:MouseEvent):void
			{
				trace("icon clicked");
				//WindowManager.attach(WelcomeForm, null, 
					//new Rectangle((super.width >> 1) - 200, 
									//(super.height >> 1) - 150, 400, 300));
			}
			
			protected function stage_resizeHandler(event:Event):void 
			{
				super.width = stage.stageWidth;
				super.height = stage.stageHeight;
			}
			
		
    
  
    //	supporting function definitions for properties, events, styles, effects
public function _Mixer_ChromeBar1_i() : org.wvxvws.gui.windows.ChromeBar
{
	_Mixer_ChromeBar1 = new org.wvxvws.gui.windows.ChromeBar();
	_Mixer_ChromeBar1.backgroundAlpha = 1;
	_Mixer_ChromeBar1.backgroundColor = 43784;
	_Mixer_ChromeBar1.height = 20;
	_Mixer_ChromeBar1.label = 'Aditall Mixer';
	_Mixer_ChromeBar1.initialized(this, "_Mixer_ChromeBar1");
	mx.binding.BindingManager.executeBindings(this, "_Mixer_ChromeBar1", _Mixer_ChromeBar1);
	return _Mixer_ChromeBar1;
}

public function _Mixer_SPAN1_i() : org.wvxvws.gui.SPAN
{
	_Mixer_SPAN1 = new org.wvxvws.gui.SPAN();
	_Mixer_SPAN1.height = 20;
	_Mixer_SPAN1.text = 'Welcome to Aditall Mixer!';
	_Mixer_SPAN1.backgroundColor = 12632256;
	_Mixer_SPAN1.background = true;
	_Mixer_SPAN1.defaultTextFormat = _Mixer_TextFormatMXML1_c();
	_Mixer_SPAN1.initialized(this, "_Mixer_SPAN1");
	mx.binding.BindingManager.executeBindings(this, "_Mixer_SPAN1", _Mixer_SPAN1);
	return _Mixer_SPAN1;
}

public function _Mixer_TextFormatMXML1_c() : org.wvxvws.gui.skins.TextFormatMXML
{
	_Mixer_TextFormatMXML1 = new org.wvxvws.gui.skins.TextFormatMXML();
	_Mixer_TextFormatMXML1.font = '_sans';
	_Mixer_TextFormatMXML1.size = 11;
	_Mixer_TextFormatMXML1.color = 3158064;
	_Mixer_TextFormatMXML1.indent = 5;
	_Mixer_TextFormatMXML1.initialized(this, null);
	mx.binding.BindingManager.executeBindings(this, "_Mixer_TextFormatMXML1", _Mixer_TextFormatMXML1);
	return _Mixer_TextFormatMXML1;
}

public function _Mixer_TimelineChrome1_i() : com.aditall.components.TimelineChrome
{
	tl = new com.aditall.components.TimelineChrome();
	tl.height = 400;
	tl.initialized(this, "tl");
	mx.binding.BindingManager.executeBindings(this, "tl", tl);
	return tl;
}

public function _Mixer_ChromeToolStrip1_i() : org.wvxvws.gui.windows.ChromeToolStrip
{
	toolStrip = new org.wvxvws.gui.windows.ChromeToolStrip();
	toolStrip.height = 30;
	toolStrip.y = 20;
	toolStrip.backgroundColor = 12595248;
	toolStrip.backgroundAlpha = 1;
	toolStrip.dataProvider = <foo><File label="File"><Open label="Open"><Open label="Open Project" hotkeys="16|79"></Open><Open label="Open Footage" hotkeys="17|16|79"></Open></Open><Save label="Save" hotkeys="16|83"></Save><Save label="Save All" hotkeys="17|16|83"></Save><Exit label="Exit" hotkeys="17|81"></Exit></File><Edit label="Edit"><Undo label="Undo" hotkeys="17|90"></Undo><Redo label="Redo" hotkeys="17|16|90"></Redo><bar kind="separator"></bar><Copy label="Copy" hotkeys="17|67"></Copy><Cut label="Cut" hotkeys="17|66"></Cut><Paste label="Paste" hotkeys="17|68"></Paste><bar kind="separator"></bar><Transform label="Transform" hotkeys="17|84"></Transform><Transform3D label="Transform3D" hotkeys="17|16|84"></Transform3D></Edit><View label="View"></View><Plugins label="Plugins"></Plugins><Settings label="Settings"></Settings><Help label="Help"><Help label="Help" hotkeys="16|112"></Help><About label="About"></About></Help></foo>;
	toolStrip.dragHandle = _Mixer_DIV1_c();
	toolStrip.initialized(this, "toolStrip");
	mx.binding.BindingManager.executeBindings(this, "toolStrip", toolStrip);
	return toolStrip;
}

public function _Mixer_DIV1_c() : org.wvxvws.gui.DIV
{
	_Mixer_DIV1 = new org.wvxvws.gui.DIV();
	_Mixer_DIV1.width = 10;
	_Mixer_DIV1.height = 30;
	_Mixer_DIV1.backgroundColor = 255;
	_Mixer_DIV1.backgroundAlpha = 1;
	_Mixer_DIV1.initialized(this, null);
	mx.binding.BindingManager.executeBindings(this, "_Mixer_DIV1", _Mixer_DIV1);
	return _Mixer_DIV1;
}

private function ___Mixer_FrameTwo1_initialized8(event:org.wvxvws.gui.GUIEvent):void
{
	initializedHandler();
}


	//	binding mgmt
    private function _Mixer_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "_Mixer_ChromeBar1.width"
            , "width");

        result[1] = new mx.binding.Binding(this,
            function():org.wvxvws.gui.skins.SkinProducer
            {

                return (new SkinProducer(com.aditall.assets.img.WhitePage));
            },
            null,
            "_Mixer_ChromeBar1.iconProducer"
            );

        result[2] = new mx.binding.Binding(this,
            function():Function
            {

                return (iconHandler);
            },
            null,
            "_Mixer_ChromeBar1.iconDownHandler"
            );

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "toolStrip.width"
            , "width");

        result[4] = new mx.binding.Binding(this,
            function():org.wvxvws.gui.skins.LabelProducer
            {

                return (new LabelProducer('@label'));
            },
            null,
            "toolStrip.labelProducer"
            );

        result[5] = new mx.binding.Binding(this,
            function():Function
            {

                return (menuClickHandler);
            },
            null,
            "toolStrip.itemClickHandler"
            );

        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "tl.width"
            , "width");

        result[7] = new mx.binding.Binding(this,
            function():Number
            {

                return (height - 420);
            },
            null,
            "tl.y"
            );

        result[8] = new mx.binding.Binding(this,
            function():Number
            {

                return (height - 20);
            },
            null,
            "_Mixer_SPAN1.y"
            );

        result[9] = new mx.binding.Binding(this,
            null,
            null,
            "_Mixer_SPAN1.width"
            , "width");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (Mixer)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;


  
    
                    mx_internal var _bindings : Array = [];
                        mx_internal var _watchers : Array = [];
                        mx_internal var _bindingsByDestination : Object = {};
                        mx_internal var _bindingsBeginWithWord : Object = {};
            }
}
